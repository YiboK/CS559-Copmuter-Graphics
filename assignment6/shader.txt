#ifdef VS 
 
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 fPosition;

uniform float time;

const float pi=3.14159;
varying vec3 modelP;
varying vec3 modelN;
varying vec3 locP;

vec2 Rotate2D(vec2 vec_in, float angle)
{
  vec2 vec_out;
  vec_out.x=cos(angle)*vec_in.x-sin(angle)*vec_in.y;
  vec_out.y=sin(angle)*vec_in.x+cos(angle)*vec_in.y;
  return vec_out;
}

void main()
{
  modelP=position;
  locP=position;
  modelN=normal;  
  
  // Comment these lines out to stop twisting
  modelP.yz = Rotate2D(modelP.yz,0.2*pi*modelP.x*sin(10.0*time)); // Try commenting out *just* this line :)
  modelN.yz = Rotate2D(modelN.xz,0.5*pi*modelP.x*sin(10.0*time)); // This is simple as that only since the transform is rotation
  
  fNormal = normalize(normalMatrix * modelN);
  vec4 pos = modelViewMatrix * vec4(modelP, 1.0);
  fPosition = pos.xyz;
  gl_Position = projectionMatrix * pos;
}
 
#else 
 
precision highp float;
varying vec3 fPosition;
varying vec3 fNormal;
varying vec3 locP;

uniform float time;

const float ambient_coeff   = 0.5;
const float specular_coeff  = 0.7;
const float specular_exp    = 16.0;

float pulse(float val, float dst) {
  return floor(mod(val*dst,1.0)+.5);
}

void main()
{
  
  vec3 n = normalize(fNormal);
  vec3 e = normalize(-fPosition);
  
  
  vec3 color1 = vec3(0.233, 1.0 + locP.x, 0.86);
  vec3 color2 = vec3(locP.z, 0.235, 0.42);
  vec3 color3 = vec3(0.16, 0.33, 1.0 + locP.x);
  vec3 color4 = vec3(0.23, 0.5+locP.y, 0.02);
  
  vec3 color5 = mix(color1, color2, abs(sin(5.0*time)));
  vec3 color6 = mix(color3, color4, abs(sin(5.0*time)));
  
  float bright = pulse(locP.x,5.0) + pulse(locP.y,5.0);

  vec3 object_color = mod(bright,2.0) > .5 ? color5: color6; 
  vec3 ambient_color  = ambient_coeff  * object_color;
  
  vec3  light_direction = vec3(-10.0, 10.0 * cos(time),1.0);
  vec3  light_color     = vec3(1.0,1.0,abs(sin(time)));
  
  vec3 l = normalize(light_direction);
  vec3 h = normalize (e+l);
  
  vec3 specular_color = specular_coeff * pow(max(0.0,dot(n,h)),specular_exp) * light_color;

  gl_FragColor = vec4(ambient_color+specular_color, 1.0);
  
  if(sin(70.0*locP.x)>0.1) discard;
}
 
#endif